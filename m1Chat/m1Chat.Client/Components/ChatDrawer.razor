@using MudBlazor
@using m1Chat.Client.Services
@inject ChatService ChatService
@inject ChatCacheService ChatCacheService
@inject UserService UserService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudDrawer @bind-Open="DrawerOpen" Anchor="Anchor.Left" Elevation="1"
           Variant="DrawerVariant.Persistent" Class="d-flex flex-column">
  <MudDrawerHeader Class="d-flex flex-column pa-2" Style="flex-shrink: 0;">
    <!-- UPDATED CODE -->
    <div class="d-flex align-center justify-center" style="position: relative;">
      <MudText Typo="Typo.h6">M1 Chat</MudText>
      <MudIconButton
        Icon="@Icons.Material.Filled.ChevronLeft"
        OnClick="ToggleDrawer"
        Style="position: absolute; right: 4px;"
      />
    </div>
    <MudButton
      Variant="Variant.Filled"
      Color="Color.Primary"
      Class="mt-2 rounded-xl"
      FullWidth="true"
      Style="height: 40px; min-height: 40px;"
      OnClick="HandleCreateNewChat"
    >
      New Chat
    </MudButton>
  </MudDrawerHeader>

  <!-- Scrollable chat list with fixed height -->
  <div class="flex-grow-1 no-scrollbar"
       style="height: calc(100% - 180px); overflow-y: auto;">
    @if (pinnedChats.Any())
    {
      <MudText Typo="Typo.subtitle2"
               Align="Align.Center"
               Color="Color.Primary"
               Class="py-2">Pinned</MudText>
      <ChatList TItem="SidebarChat"
                Items="pinnedChats"
                ActiveItemId="ActiveChatId"
                OnItemSelected="@(chat => HandleSelectChat(chat))"
                OnItemPinned="@(chat => HandlePinChat(chat))"
                OnItemDeleted="@(chat => HandleDeleteChat(chat))"
                OnItemRenamed="@(chat => HandleRenameChat(chat))"
                OnItemExported="@(chat => HandleExportChat(chat))"
                GetItemId="chat => chat.Id"
                GetItemName="chat => chat.Name"
                OnItemMouseEnter="@(chat => HandleChatHover(chat))" />
    }

    @if (todayChats.Any())
    {
      <MudText Typo="Typo.subtitle2"
               Align="Align.Center"
               Color="Color.Primary"
               Class="py-2">Today</MudText>
      <ChatList TItem="SidebarChat"
                Items="todayChats"
                ActiveItemId="ActiveChatId"
                OnItemSelected="@(chat => HandleSelectChat(chat))"
                OnItemPinned="@(chat => HandlePinChat(chat))"
                OnItemDeleted="@(chat => HandleDeleteChat(chat))"
                OnItemRenamed="@(chat => HandleRenameChat(chat))"
                OnItemExported="@(chat => HandleExportChat(chat))"
                GetItemId="chat => chat.Id"
                GetItemName="chat => chat.Name"
                OnItemMouseEnter="@(chat => HandleChatHover(chat))" />
    }

    @if (yesterdayChats.Any())
    {
      <MudText Typo="Typo.subtitle2"
               Align="Align.Center"
               Color="Color.Primary"
               Class="py-2">Yesterday</MudText>
      <ChatList TItem="SidebarChat"
                Items="yesterdayChats"
                ActiveItemId="ActiveChatId"
                OnItemSelected="@(chat => HandleSelectChat(chat))"
                OnItemPinned="@(chat => HandlePinChat(chat))"
                OnItemDeleted="@(chat => HandleDeleteChat(chat))"
                OnItemRenamed="@(chat => HandleRenameChat(chat))"
                OnItemExported="@(chat => HandleExportChat(chat))"
                GetItemId="chat => chat.Id"
                GetItemName="chat => chat.Name"
                OnItemMouseEnter="@(chat => HandleChatHover(chat))" />
    }

    @if (last7DaysChats.Any())
    {
      <MudText Typo="Typo.subtitle2"
               Align="Align.Center"
               Color="Color.Primary"
               Class="py-2">Last 7 Days</MudText>
      <ChatList TItem="SidebarChat"
                Items="last7DaysChats"
                ActiveItemId="ActiveChatId"
                OnItemSelected="@(chat => HandleSelectChat(chat))"
                OnItemPinned="@(chat => HandlePinChat(chat))"
                OnItemDeleted="@(chat => HandleDeleteChat(chat))"
                OnItemRenamed="@(chat => HandleRenameChat(chat))"
                OnItemExported="@(chat => HandleExportChat(chat))"
                GetItemId="chat => chat.Id"
                GetItemName="chat => chat.Name"
                OnItemMouseEnter="@(chat => HandleChatHover(chat))" />
    }

    @if (olderChats.Any())
    {
      <MudText Typo="Typo.subtitle2"
               Align="Align.Center"
               Color="Color.Primary"
               Class="py-2">Older</MudText>
      <ChatList TItem="SidebarChat"
                Items="olderChats"
                ActiveItemId="ActiveChatId"
                OnItemSelected="@(chat => HandleSelectChat(chat))"
                OnItemPinned="@(chat => HandlePinChat(chat))"
                OnItemDeleted="@(chat => HandleDeleteChat(chat))"
                OnItemRenamed="@(chat => HandleRenameChat(chat))"
                OnItemExported="@(chat => HandleExportChat(chat))"
                GetItemId="chat => chat.Id"
                GetItemName="chat => chat.Name"
                OnItemMouseEnter="@(chat => HandleChatHover(chat))" />
    }
  </div>

  <!-- User section fixed at bottom -->
  <div class="pa-2" style="flex-shrink: 0;">
    <MudText Typo="Typo.subtitle2" Class="mb-1">
      @UserEmail
    </MudText>
    <MudButton
      Variant="Variant.Filled"
      Color="Color.Secondary"
      FullWidth="true"
      OnClick="Logout"
      Class="rounded-xl"
    >
      Logout
    </MudButton>
  </div>
</MudDrawer>

@code {
  [Parameter]
  public bool DrawerOpen { get; set; }

  [Parameter]
  public EventCallback<bool> DrawerOpenChanged { get; set; }

  [Parameter]
  public List<SidebarChat> SidebarChats { get; set; } = new();

  [Parameter]
  public string UserEmail { get; set; } = "";

  [Parameter]
  public string? ActiveChatId { get; set; }

  [Parameter]
  public EventCallback<SidebarChat> OnChatSelected { get; set; }

  [Parameter]
  public EventCallback OnCreateNewChat { get; set; }

  [Parameter]
  public EventCallback<SidebarChat> OnChatPinned { get; set; }

  [Parameter]
  public EventCallback<SidebarChat> OnChatDeleted { get; set; }

  [Parameter]
  public EventCallback<SidebarChat> OnChatRenamed { get; set; }

  // Filtered chat lists
  private List<SidebarChat> pinnedChats =>
    SidebarChats.Where(c => c.IsPinned).OrderByDescending(c => c.LastUpdatedAt).ToList();

  private List<SidebarChat> nonPinnedChats =>
    SidebarChats.Where(c => !c.IsPinned).ToList();

  private List<SidebarChat> todayChats =>
    nonPinnedChats
      .Where(c => c.LastUpdatedAt.Date == DateTime.Today)
      .OrderByDescending(c => c.LastUpdatedAt)
      .ToList();

  private List<SidebarChat> yesterdayChats =>
    nonPinnedChats
      .Where(c => c.LastUpdatedAt.Date == DateTime.Today.AddDays(-1))
      .OrderByDescending(c => c.LastUpdatedAt)
      .ToList();

  private List<SidebarChat> last7DaysChats =>
    nonPinnedChats
      .Where(
        c =>
          c.LastUpdatedAt.Date >= DateTime.Today.AddDays(-8)
          && c.LastUpdatedAt.Date <= DateTime.Today.AddDays(-2)
      )
      .OrderByDescending(c => c.LastUpdatedAt)
      .ToList();

  private List<SidebarChat> olderChats =>
    nonPinnedChats
      .Where(c => c.LastUpdatedAt.Date < DateTime.Today.AddDays(-8))
      .OrderByDescending(c => c.LastUpdatedAt)
      .ToList();

  private async Task ToggleDrawer()
  {
    DrawerOpen = !DrawerOpen;
    await DrawerOpenChanged.InvokeAsync(DrawerOpen);
  }

  private async Task HandleCreateNewChat() => await OnCreateNewChat.InvokeAsync();

  private async Task HandleSelectChat(SidebarChat chat) =>
    await OnChatSelected.InvokeAsync(chat);

  private async Task HandlePinChat(SidebarChat chat) =>
    await OnChatPinned.InvokeAsync(chat);

  private async Task HandleDeleteChat(SidebarChat chat) =>
    await OnChatDeleted.InvokeAsync(chat);

  private async Task HandleExportChat(SidebarChat chat)
  {
    await Task.Delay(1);
    Snackbar.Add("Feature not yet implemented", Severity.Warning);
    Console.WriteLine($"Export chat: {chat.Name}");
  }

  private async Task HandleChatHover(SidebarChat chat)
  {
    if (Guid.TryParse(chat.Id, out var chatId))
    {
      await ChatCacheService.PrefetchChatAsync(chatId);
    }
  }

  private async Task HandleRenameChat(SidebarChat chat)
  {
    var parameters = new DialogParameters { ["CurrentName"] = chat.Name };
    var options =
      new DialogOptions
      {
        CloseButton = true,
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        BackgroundClass = "blur-background"
      };
    
    var dialog = await DialogService.ShowAsync<RenameChatDialog>("Rename Chat", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled && result.Data is string newName && !string.IsNullOrWhiteSpace(newName))
    {
      var updatedChat = chat with { Name = newName };
      await OnChatRenamed.InvokeAsync(updatedChat);
    }
  }

  private void Logout() => NavigationManager.NavigateTo("/");

  public record SidebarChat(
    string Id,
    string Name,
    string Model,
    bool IsPinned = false,
    DateTime LastUpdatedAt = default
  );
}
