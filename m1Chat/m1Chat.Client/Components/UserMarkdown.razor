@* UserMarkdown.razor *@
@using System.ComponentModel.DataAnnotations
@using Markdig
@inject IJSRuntime Js
@using Ganss.Xss
@using Markdig.SyntaxHighlighting

@* Render the content inside a simple div. The parent MudChatBubble will handle the bubble styling and alignment. *@
<div @ref="_userDiv"></div>

@code {
    [Parameter] public string Markdown { get; set; } = "";

    private ElementReference _userDiv;
    private string _lastMarkdown = "";

    // Use the same pipeline configuration as AiMarkdown for consistency
    private static readonly MarkdownPipeline Pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .Build();

    private static readonly HtmlSanitizer HtmlSanitizer = new HtmlSanitizer();
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        HtmlSanitizer.AllowedTags.Add("pre");
        HtmlSanitizer.AllowedTags.Add("code");
        HtmlSanitizer.AllowedTags.Add("span");;
        HtmlSanitizer.AllowedAttributes.Add("class");
        // Check if the markdown content has actually changed to avoid unnecessary JS calls
        if (Markdown != _lastMarkdown)
        {
            _lastMarkdown = Markdown;
            // 1. Convert Markdown to HTML
            var unsafeHtml = Markdig.Markdown.ToHtml(Markdown, Pipeline);
            // 2. SANITIZE THE HTML OUTPUT
            var safeHtml = HtmlSanitizer.Sanitize(unsafeHtml);
            // Use the same JS interop function as AiMarkdown
            await Js.InvokeVoidAsync("setInnerHtmlAndRenderMath", _userDiv, safeHtml);
        }
    }
}