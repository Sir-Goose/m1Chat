@page "/"
@using MudBlazor
@using System.Net.Http.Json;  
@using System.Text.Json;      

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
        <MudPaper Class="pa-8" Elevation="5">
            <MudGrid>
                <MudItem xs="12" Class="text-center mb-8">
                    <MudText Typo="Typo.h4">Welcome</MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">
                        Please enter your PIN
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="Pin" 
                                 Label="PIN" 
                                 InputType="InputType.Password" 
                                 Variant="Variant.Outlined"
                                 Immediate="true"
                                 OnKeyDown="@OnKeyDown"
                                 Class="full-width"
                                 Clearable="true" />
                </MudItem>

                <MudItem xs="12" Class="mt-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              FullWidth="true"
                              Disabled="@(string.IsNullOrWhiteSpace(Pin))"
                              OnClick="ValidatePin">
                        Login
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
</MudMainContent>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private HttpClient HttpClient { get; set; } = null!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;

    private string Pin { get; set; } = string.Empty;

    private async Task ValidatePin()
    {
        try
        {
            // Send PIN to server for validation
            var response = await HttpClient.PostAsJsonAsync(
                "/api/auth/login", new { pin = Pin }
            );

            if (response.IsSuccessStatusCode)
            {
                // Assuming the response is JSON with a "token" property
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (result != null && result.TryGetValue("token", out var token))
                {
                    // Store the token in local storage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                    
                    Snackbar.Add("Login successful", Severity.Success);
                    await Task.Delay(1000);  // Optional delay for UX
                    NavigationManager.NavigateTo("/chat");
                }
                else
                {
                    Snackbar.Add("Login failed: No token received", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Invalid PIN", Severity.Error);
                Pin = string.Empty;  // Clear the input
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions (e.g., network errors)
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            Pin = string.Empty;
        }
    }

    private void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !string.IsNullOrWhiteSpace(Pin))
        {
            ValidatePin();
        }
    }
}
