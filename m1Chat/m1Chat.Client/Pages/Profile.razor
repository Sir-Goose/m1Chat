@page "/Profile"
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using m1Chat.Client.Services

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Elevation="3" Class="pa-4 rounded-lg blur-background">
        <MudGrid Spacing="0">
            <!-- Header -->
            <MudItem xs="12" Class="d-flex align-center">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                               Color="Color.Inherit"
                               OnClick="NavigateToChat"
                               Edge="Edge.Start" />
                <MudText Typo="Typo.h4" Class="flex-grow-1 text-center pr-10">
                    User Profile
                </MudText>
            </MudItem>

            <!-- Account Info -->
            <MudItem xs="12" Class="mb-4">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Class="mb-2">
                            Account Information
                        </MudText>
                        <MudText Typo="Typo.h6" Color="Color.Primary">
                           Email
                        </MudText>
                        <MudText>
                            @UserEmail
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Usage Stats -->
            <MudItem xs="12" Class="mb-4">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Class="mb-2">Usage Statistics</MudText>
                        <MudGrid>
                            <MudItem xs="12" sm="4" Class="text-center">
                                <MudText Typo="Typo.h4" Color="Color.Primary">@TotalChats</MudText>
                                <MudText>Chat Threads</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="4" Class="text-center">
                                <MudText Typo="Typo.h4" Color="Color.Primary">@TotalMessages</MudText>
                                <MudText>Messages Sent</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <!-- Model Selection -->
            <MudPaper Elevation="0">
            <MudText Typo="Typo.h5" Class="mb-2">Enable/Disable Models</MudText>
            <MudDataGrid Items="@models" 
                         Filterable="false" 
                         SortMode="@SortMode.None" 
                         Groupable="false" 
                         MultiSelection="true" 
                         SelectedItems="@selectedModels" 
                         SelectedItemsChanged="@(EventCallback.Factory.Create<HashSet<Model>>(this, OnSelectedItemsChanged))">
                <Columns>
                    <SelectColumn T="Model"/>
                    <PropertyColumn Property="x => x.Name" Title="Model" />
                    <PropertyColumn Property="x => x.Provider"/>
                </Columns>
            </MudDataGrid>
            </MudPaper>

            <!-- API Keys -->
            <MudItem xs="12" Class="mb-4">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Class="mb-2">Bring Your Own Key</MudText>
                        <MudText Class="mt-2">OpenRouter</MudText>
                        <MudTextField @bind-Value="Openrouterkey" Label="sk-1234...." 
                                      Variant="Variant.Outlined" Class="rounded-xl"
                                      Disabled="@isSaving"></MudTextField>
                        <MudText Class="mt-4">AI Studio</MudText>
                        <MudTextField @bind-Value="AiStudioKey" Label="sk-1234...." 
                                      Variant="Variant.Outlined" Class="rounded-xl"
                                      Disabled="@isSaving"></MudTextField>
                        <MudText Class="mt-4">Chutes</MudText>
                        <MudTextField @bind-Value="ChutesKey" Label="sk-1234...." 
                                      Variant="Variant.Outlined" Class="rounded-xl"
                                      Disabled="@isSaving"></MudTextField>
                        <MudText Class="mt-4">Mistral</MudText>
                        <MudTextField @bind-Value="MistralKey" Label="sk-1234...." 
                                      Variant="Variant.Outlined" Class="rounded-xl"
                                      Disabled="@isSaving"></MudTextField>
                        
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   FullWidth="true" 
                                   Class="mt-3 rounded-xl" 
                                   OnClick="SaveKeys"
                                   Disabled="@isSaving">
                            @(isSaving ? "Saving..." : "Save Keys")
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Logout -->
            <MudItem xs="12" Class="text-center mt-4">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Error"
                           StartIcon="@Icons.Material.Filled.Logout"
                           OnClick="Logout"
                           Class="mt-4">
                    Logout
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private string UserEmail { get; set; } = "Loading...";
    private int TotalChats = 0;
    private int TotalMessages = 0;
    private bool isSaving = false;
    
    private string Openrouterkey = "";
    private string AiStudioKey = "";
    private string ChutesKey = "";
    private string MistralKey = "";

    public record Model(string Name, string Provider);
    
    public List<Model> models = new();
    public HashSet<Model> selectedModels = new HashSet<Model>();

    protected override async Task OnInitializedAsync()
    {
        try {
            UserEmail = await UserService.GetUserEmailAsync() ?? "Unknown";
            
            var stats = await UserService.GetUserStatsAsync();
            if (stats != null) {
                TotalChats = stats.TotalChats;
                TotalMessages = stats.TotalMessages;
            }
            
            var keys = await UserService.GetUserApiKeysAsync();
            Openrouterkey = keys.GetValueOrDefault("OpenRouter") ?? "";
            AiStudioKey = keys.GetValueOrDefault("AIStudio") ?? "";
            ChutesKey = keys.GetValueOrDefault("Chutes") ?? "";
            MistralKey = keys.GetValueOrDefault("Mistral") ?? "";
            
            models = new List<Model> {
                new("Deepseek v3", "Chutes"),
                new("Deepseek R1 0528", "Chutes"),
                new("Gemini 2.5 Flash", "AI Studio"),
                new("Gemini 2.0 Flash", "AI Studio"),
                new("Devstral Small", "Mistral AI"),
                new("Mistral Medium", "Mistral AI"),
                new("Gemma 3 27B", "Openrouter"),
                new("Llama 4 Maverick", "Openrouter"),
                new("Llama 3.1 8B", "Groq"),
                new("Llama 4 Scout", "Groq"),
            };
            
            selectedModels = new HashSet<Model>(models);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
        }
    }

    private void OnSelectedItemsChanged(HashSet<Model> items) => selectedModels = items;

    private void Logout() => NavigationManager.NavigateTo("/", forceLoad: true);

    private void NavigateToChat() => NavigationManager.NavigateTo("/Chat");

    private async Task SaveKeys()
    {
        isSaving = true;
        try
        {
            var keys = new Dictionary<string, string>
            {
                ["OpenRouter"] = Openrouterkey ?? "",
                ["AIStudio"] = AiStudioKey ?? "",
                ["Chutes"] = ChutesKey ?? "",
                ["Mistral"] = MistralKey ?? ""
            };

            await UserService.SaveUserApiKeysAsync(keys);
            Snackbar.Add("API keys saved successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save keys: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }
}
