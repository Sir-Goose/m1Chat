@page "/Chat"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using Markdig
@using m1Chat.Client.Components
@using m1Chat.Client.Services
@inject NavigationManager NavigationManager
@inject IScrollManager ScrollManager
@inject ChatCompletionService CompletionService
@inject ChatService ChatService
@inject IJSRuntime JS
@using ServiceChatMessage = m1Chat.Client.Services.ChatMessage
@inject UserService UserService

<MudLayout>
  <MudDrawer
    @bind-Open="_drawerOpen"
    Anchor="Anchor.Left"
    Elevation="1"
    Variant="DrawerVariant.Persistent"
    Class="d-flex flex-column"
  >
    <MudDrawerHeader Class="d-flex flex-column pa-2">
      <div class="d-flex align-center justify-space-between">
        <MudText Typo="Typo.h6">M1 Chat</MudText>
        <MudIconButton
          Icon="@Icons.Material.Filled.ChevronLeft"
          OnClick="ToggleDrawer"
        />
      </div>
      <MudButton
        Variant="Variant.Filled"
        Color="Color.Primary"
        Class="mt-2"
        FullWidth="true"
        OnClick="CreateNewChat"
      >
        New Chat
      </MudButton>
    </MudDrawerHeader>

    <div class="flex-grow-1 no-scrollbar">
      <MudList T="SidebarChat" Clickable="false">
        @foreach (var chat in SidebarChats)
        {
          <MudMenu
            Style="width:100%;"
            ActivationEvent="@MouseEvent.RightClick"
            AnchorOrigin="Origin.BottomLeft"
            TransformOrigin="Origin.TopLeft"
          >
            <ActivatorContent>
              <div
                class="sidebar-chat-row"
                @onclick="@(() => LoadChat(chat))"
                @oncontextmenu:preventDefault
                @oncontextmenu="@(() => { })"
              >
                <MudText Class="chat-name-text">
                  @chat.Name
                </MudText>
              </div>
            </ActivatorContent>
          </MudMenu>
        }
      </MudList>
    </div>

    <div class="pa-2">
      <MudText Typo="Typo.subtitle2" Class="mb-1">
        @UserEmail
      </MudText>
      <MudButton
        Variant="Variant.Filled"
        Color="Color.Secondary"
        FullWidth="true"
        OnClick="Logout"
      >
        Logout
      </MudButton>
    </div>
  </MudDrawer>

  <MudMainContent
    Class="d-flex flex-column p-0 chat-main-content-bg"
    Style="height:100vh;overflow:hidden;"
  >
    <div
      class="chat-container px-2 pb-2 no-scrollbar"
      @ref="_chatContainerRef"
      style="overflow-y:auto; flex:1 1 auto;"
    >
      <MudPaper Elevation="0">
        <MudStack Spacing="4">
          @foreach (var m in ChatHistory)
          {
            if (m.IsUser)
            {
              <MudStack JustifyContent="FlexEnd">
                <div class="user-message-container">
                  <MudChatBubble
                    Variant="Variant.Text"
                    Class="user-message"
                  >
                    <UserMarkdown Markdown="@m.Text" />
                  </MudChatBubble>
                </div>
              </MudStack>
            }
            else
            {
              <MudStack JustifyContent="FlexStart">
                <div class="ai-message-container">
                  <AiMarkdown Markdown="@m.Text" />
                </div>
              </MudStack>
            }
          }
        </MudStack>
      </MudPaper>
    </div>

    <div class="input-area-container">
      <MudPaper Elevation="0" Class="pa-2 flex-shrink-0">
        <MudContainer Class="pa-0">
          <div style="display:flex;flex-direction:column;">
            <div style="display:flex;align-items:center;">
              <MudTextField
                @bind-Value="MessageText"
                Label="Enter your message"
                Variant="Variant.Outlined"
                Lines="2"
                AutoGrow="true"
                MaxLines="10"
                Class="flex-grow-1"
                Immediate="true"
                @onkeyup="HandleKeyUp"
              />
            </div>
            <div
              style="display:flex;align-items:center;margin-top:8px;"
            >
              <MudSelect
                @bind-Value="ChatSelectedOption"
                Label="Select a model"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                FitContent="true"
                Class="mr-2"
              >
                @foreach (var opt in ChatOptions)
                {
                  <MudSelectItem Value="@opt">@opt</MudSelectItem>
                }
              </MudSelect>
              <MudToggleIconButton
                @bind-Toggled="_searchEnabled"
                Icon="@Icons.Material.Filled.Public"
                ToggledIcon="@Icons.Material.Filled.PublicOff"
                Color="Color.Primary"
                ToggledColor="Color.Secondary"
                aria-label="Toggle search"
                Class="ml-2"
              />
              <MudText Typo="Typo.body1" Class="ml-1">
                Search
              </MudText>
              <div
                style="margin-left:auto;display:flex;align-items:center;"
              >
                <MudIconButton
                  Icon="@Icons.Material.Filled.AttachFile"
                  Color="Color.Primary"
                  OnClick="AttachFile"
                  aria-label="Attach file"
                  Class="mr-2"
                />
                <MudButton
                  Variant="Variant.Filled"
                  Color="Color.Primary"
                  EndIcon="@Icons.Material.Filled.Send"
                  OnClick="SendMessage"
                  aria-label="Send message"
                >
                  Send
                </MudButton>
              </div>
            </div>
          </div>
        </MudContainer>
      </MudPaper>
    </div>
  </MudMainContent>
</MudLayout>

@code {
  private bool _drawerOpen = true;
  private bool _searchEnabled = false;
  private bool _needsScroll;
  private bool _isAtBottom = true;
  private ElementReference _chatContainerRef;

  private string UserEmail { get; set; } = "";
  private string MessageText { get; set; } = "";

  private string ChatSelectedOption { get; set; } = "Gemini 2.5 Pro";
  private List<string> ChatOptions = new()
  {
    "Gemini 2.5 Pro",
    "Gemini 2.5 Flash (Thinking)",
    "Gemini 2.5 Flash"
  };

  // current chat state
  private string? ChatId;
  private string ChatName = "New Chat";
  private List<ChatMessage> ChatHistory = new();

  // sidebar
  private List<SidebarChat> SidebarChats = new();

  private record SidebarChat(string Id, string Name);

  protected override async Task OnInitializedAsync()
  {
    UserEmail = await UserService.GetUserEmailAsync() ?? "Unknown";
    await LoadSidebarChatsAsync();
  }

  private async Task LoadSidebarChatsAsync()
  {
    var list = await ChatService.GetChatsAsync();
    SidebarChats = list
      .Select(c => new SidebarChat(c.Id.ToString(), c.Name))
      .ToList();
  }

  private void CreateNewChat()
  {
    ChatId = null;
    ChatName = "New Chat";
    ChatHistory.Clear();
    StateHasChanged();
  }

  private async Task LoadChat(SidebarChat chat)
  {
    var full = await ChatService.GetChatAsync(Guid.Parse(chat.Id));
    ChatId = full.Id.ToString();
    ChatName = full.Name;
    ChatSelectedOption = full.Model;
    ChatHistory = full.Messages
      .Select(m => new ChatMessage
      {
        IsUser = m.Role == "user",
        Text = m.Content
      })
      .ToList();

    _needsScroll = true;
    StateHasChanged();
  }

  private List<ServiceChatMessage> ToSharedMessages() =>
    ChatHistory.Select(m => new ServiceChatMessage
    {
      Role = m.IsUser ? "user" : "assistant",
      Content = m.Text
    }).ToList();

  [JSInvokable]
  public void SetAtBottom(bool atBottom) => _isAtBottom = atBottom;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync(
        "chatScroll.onScroll",
        _chatContainerRef,
        DotNetObjectReference.Create(this)
      );
    }
    if (_needsScroll && _isAtBottom)
    {
      await ScrollManager.ScrollToBottomAsync(
        ".chat-container",
        ScrollBehavior.Smooth
      );
      _needsScroll = false;
    }
  }

  private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

  private async Task HandleKeyUp(KeyboardEventArgs args)
  {
    if (args.Key == "Enter" && !args.ShiftKey)
      await SendMessage();
  }

  private async Task SendMessage()
  {
    var textToSend = MessageText.Trim();
    if (string.IsNullOrWhiteSpace(textToSend))
      return;

    // 1) Add the user’s message locally
    ChatHistory.Add(new ChatMessage { IsUser = true, Text = textToSend });
    MessageText = "";
    _isAtBottom = true;
    _needsScroll = true;
    StateHasChanged();

    // 2) If brand‐new chat, create it on the server
    if (ChatId == null)
    {
      ChatName = textToSend.Length <= 20
        ? textToSend
        : textToSend[..20] + "...";

      var createReq = new ChatService.CreateChatRequest(
        ChatName,
        ChatSelectedOption,
        ToSharedMessages()
          .Select(m => new ChatService.ChatMessageDto(m.Role, m.Content))
          .ToArray()
      );
      var newId = await ChatService.CreateChatAsync(createReq);
      ChatId = newId.ToString();
      await LoadSidebarChatsAsync();
    }

    // 3) Add AI placeholder
    var aiMessage = new ChatMessage { IsUser = false, Text = "" };
    ChatHistory.Add(aiMessage);
    _needsScroll = true;
    StateHasChanged();

    // 4) Stream the AI reply
    try
    {
      await foreach (var chunk in
        CompletionService.StreamCompletionAsync(ToSharedMessages()))
      {
        aiMessage.Text += chunk;
        _needsScroll = true;
        await InvokeAsync(StateHasChanged);
      }
    }
    catch (Exception ex)
    {
      aiMessage.Text = $"[Error: {ex.Message}]";
      await InvokeAsync(StateHasChanged);
    }

    // 5) Persist updated history
    if (Guid.TryParse(ChatId, out var cId))
    {
      var updateReq = new ChatService.UpdateChatRequest(
        ChatName,
        ChatSelectedOption,
        ToSharedMessages()
          .Select(m => new ChatService.ChatMessageDto(m.Role, m.Content))
          .ToArray()
      );
      await ChatService.UpdateChatAsync(cId, updateReq);
      await LoadSidebarChatsAsync();
    }
  }

  private void AttachFile() => Console.WriteLine("Attach file clicked.");

  private void Logout()
  {
    Console.WriteLine("Logout clicked");
    NavigationManager.NavigateTo("/");
  }

  private record ChatMessage
  {
    public string Id { get; init; } = Guid.NewGuid().ToString();
    public bool   IsUser { get; init; }
    public string Text   { get; set; } = "";
  }
}
