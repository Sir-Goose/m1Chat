@page "/Chat"
@using m1Chat.Client.Components
@using m1Chat.Client.Services
@inject IScrollManager ScrollManager
@inject ChatCompletionService CompletionService
@inject ChatService ChatService
@inject FileUploadService FileUploadService
@inject IJSRuntime Js
@using ServiceChatMessage = m1Chat.Client.Services.ChatMessage 
@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager


<MudLayout>
  <ChatDrawer @bind-DrawerOpen="_drawerOpen"
              SidebarChats="SidebarChats"
              UserEmail="@UserEmail"
              ActiveChatId="@_chatId"
              OnChatSelected="LoadChat"
              OnCreateNewChat="CreateNewChat"
              OnChatPinned="PinChat"
              OnChatDeleted="DeleteChat"
              OnChatRenamed="HandleChatRenamed"/>

  <MudMainContent
    Class="d-flex flex-column p-0 chat-main-content-bg"
    Style="height:100vh;overflow:hidden;"
  >
    @if (!_drawerOpen)
    {
      <MudIconButton
        Icon="@Icons.Material.Filled.ChevronRight"
        OnClick="() => _drawerOpen = true"
        Color="Color.Primary"
        Class="ma-2"
        Style="position: fixed; left: 0; top: 0; z-index: 100; background-color: var(--mud-palette-background); box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
        aria-label="Open menu"
      />
    }

    <div
      class="chat-container px-2 pb-2 no-scrollbar"
      @ref="_chatContainerRef"
      style="overflow-y:auto; flex:1 1 auto;"
    >
      <MudPaper Elevation="0">
        <MudStack Spacing="4">
          @foreach (var m in _chatHistory)
          {
            if (m.IsUser)
            {
              <MudStack JustifyContent="FlexEnd">
                <div class="user-message-container">
                  @if (m.FileIds != null && m.FileIds.Any())
                  {
                    <div class="attached-files-display mb-2">
                      <MudText Typo="Typo.caption" Color="Color.Secondary">Attached Files:</MudText>
                      @foreach (var fileId in m.FileIds)
                      {
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" 
                                 Icon="@Icons.Material.Filled.AttachFile">
                          File: @(fileId.ToString().Length > 8 ? fileId.ToString()[..8] + "..." : fileId.ToString())
                        </MudChip>
                      }
                    </div>
                  }
                  <MudChatBubble
                    Variant="Variant.Text"
                    Class="user-message"
                  >
                    <UserMarkdown Markdown="@m.Text"/>
                  </MudChatBubble>
                  <div class="message-actions">
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Outlined.Refresh"
                        Size="Size.Small"
                        OnClick="@(() => HandleRegenerateMessage(m))"
                        aria-label="Regenerate"
                        Title="Regenerate"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.Edit"
                        Size="Size.Small"
                        OnClick="@(() => HandleEditMessage(m))"
                        aria-label="Edit"
                        Title="Edit"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.ContentCopy"
                        Size="Size.Small"
                        OnClick="@(async () => await HandleCopyMessage(m))"
                        aria-label="Copy"
                        Title="Copy"
                      />
                    </span>
                  </div>
                  <div class="user-message-hoverzone"></div>
                </div>
              </MudStack>
            }
            else
            {
              <MudStack JustifyContent="FlexStart">
                <div class="ai-message-container">
                  <AiMarkdown Markdown="@m.Text"/>
                  <div class="message-actions">
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.ContentCopy"
                        Size="Size.Small"
                        OnClick="@(async () => await HandleCopyMessage(m))"
                        aria-label="Copy"
                        Title="Copy"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.MergeType"
                        Size="Size.Small"
                        OnClick="@(() => HandleBranchMessage(m))"
                        aria-label="Branch"
                        Title="Branch"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.Refresh"
                        Size="Size.Small"
                        OnClick="@(() => HandleRegenerateMessage(m))"
                        aria-label="Regenerate"
                        Title="Regenerate"
                      />
                    </span>
                  </div>
                  <div class="ai-message-hoverzone"></div>
                </div>
              </MudStack>
            }
          }
        </MudStack>
      </MudPaper>
    </div>

    <div class="input-area-container">
      <MudPaper Elevation="0" Class="pa-2 flex-shrink-0">
        <MudContainer Class="pa-0">
          <div style="display:flex;flex-direction:column;">
            
            <!-- File Upload Component -->
            @if (CurrentMessageFiles.Any()) // Conditionally show if there are files to display
            {
              <div class="mb-2"> 
                <FileUploadComponent @bind-UploadedFiles="CurrentMessageFiles" />
              </div>
            }
            
            <div style="display:flex;align-items:center;">
              <MudTextField
                @bind-Value="MessageText"
                Label="Enter your message"
                Variant="Variant.Outlined"
                AutoGrow="true"
                MaxLines="10"
                Class="flex-grow-1"
                Immediate="false"
                OnKeyUp="HandleKeyUp"/>
            </div>
            <div
              style="display:flex;align-items:center;margin-top:8px;">
              <MudSelect
                @bind-Value="ChatSelectedOption"
                Label="Select a model"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                FitContent="true"
                Class="mr-2">
                @foreach (var opt in _chatOptions)
                {
                  <MudSelectItem Value="@opt">@opt</MudSelectItem>
                }
              </MudSelect>
              <MudSelect
                @bind-Value="ThinkingSelectedOption"
                Label="Thinking"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                FitContent="true"
                Class="mr-2"
                Disabled="@_isThinkingSelectorDisabled">
                @foreach (var opt in _currentThinkingOptions)
                {
                  <MudSelectItem Value="@opt">@opt</MudSelectItem>
                }
              </MudSelect>
              <MudToggleIconButton
                @bind-Toggled="_searchEnabled"
                Icon="@Icons.Material.Filled.Public"
                ToggledIcon="@Icons.Material.Filled.PublicOff"
                Color="Color.Primary"
                ToggledColor="Color.Secondary"
                aria-label="Toggle search"
                Class="ml-2"/>
              <MudText Typo="Typo.body1" Class="ml-1">
                Search
              </MudText>
              <div
                style="margin-left:auto;display:flex;align-items:center;">
                <MudIconButton
                  Icon="@Icons.Material.Filled.AttachFile"
                  Color="Color.Primary"
                  OnClick="TriggerFileUpload" 
                  aria-label="Attach file"
                  Class="mr-2"/>
                <MudButton
                  Variant="Variant.Filled"
                  Color="Color.Primary"
                  EndIcon="@Icons.Material.Filled.Send"
                  OnClick="SendMessage"
                  aria-label="Send message"
                  Disabled="@_isSendingMessage">
                  Send
                </MudButton>
              </div>
            </div>
          </div>
        </MudContainer>
      </MudPaper>
    </div>
  </MudMainContent>
</MudLayout>

@code {
  private bool _drawerOpen = true;
  private bool _searchEnabled;
  private bool _needsScroll;
  private bool _isAtBottom = true;
  private bool _isSendingMessage = false;

  private ElementReference _chatContainerRef;

  private string UserEmail { get; set; } = "";
  private string MessageText { get; set; } = "";

  // File upload properties
  private List<FileUploadService.UploadedFileInfo> CurrentMessageFiles = new();

  private string _chatSelectedOption = "Gemini 2.5 Flash";
  private string ChatSelectedOption
  {
    get => _chatSelectedOption;
    set
    {
      if (_chatSelectedOption != value)
      {
        _chatSelectedOption = value;
        ApplyThinkingOptionsForModel(value);
        StateHasChanged();
      }
    }
  }
  private string ThinkingSelectedOption { get; set; } = "None";

  private bool _isThinkingSelectorDisabled = false;
  private List<string> _currentThinkingOptions = new(); 

  private static readonly List<string> ThinkingOptionsLowMediumHigh = new() { "Low", "Medium", "High" };
  private static readonly List<string> ThinkingOptionsNoneLowMediumHigh = new() { "None", "Low", "Medium", "High" };
  private static readonly List<string> ThinkingOptionsNoneOnly = new() { "None" }; 

  private Dictionary<string, List<string>> _modelThinkingOptionsMap;


  private readonly List<string> _chatOptions = new()
  {
    "DeepSeek v3",
    "DeepSeek Prover v2",
    "Deepseek r1",
    "Gemini 2.5 Pro",
    "Gemini 2.5 Flash",
    "Gemini 2.0 Flash",
    "Qwen3 235B",
    "DeepSeek r1 v3 Chimera",
    "Gemma 3 27B",
    "Qwen3 30B",
    "llama-3.1-8b-instant"
  };

  private string? _chatId;
  private string _chatName = "New Chat";
  private List<ChatMessage> _chatHistory = new();
  private bool _chatIsPinned;

  private List<ChatDrawer.SidebarChat> SidebarChats = new();

  // To trigger file input from FileUploadComponent
  private FileUploadComponent _fileUploadComponentRef;


  protected override async Task OnInitializedAsync()
  {
    UserEmail = await UserService.GetUserEmailAsync() ?? "Unknown";
    await LoadSidebarChatsAsync();

    _modelThinkingOptionsMap = new Dictionary<string, List<string>>()
    {
      { "Gemini 2.5 Pro", ThinkingOptionsNoneOnly },
      { "Gemini 2.5 Flash", ThinkingOptionsNoneLowMediumHigh },
      { "Gemini 2.0 Flash", ThinkingOptionsNoneOnly },
      { "DeepSeek v3", ThinkingOptionsNoneOnly },
      { "DeepSeek Prover v2", ThinkingOptionsLowMediumHigh },
      { "Deepseek r1", ThinkingOptionsLowMediumHigh },
      { "DeepSeek r1 v3 Chimera", ThinkingOptionsLowMediumHigh },
      { "Qwen3 235B", ThinkingOptionsLowMediumHigh },
      { "Qwen3 30B", ThinkingOptionsLowMediumHigh },
      { "Gemma 3 27B", ThinkingOptionsNoneOnly },
      { "llama-3.1-8b-instant", ThinkingOptionsNoneOnly } 
    };

    ApplyThinkingOptionsForModel(ChatSelectedOption);
  }

  private void HandleChatModelChanged(string newModel)
  {
    ChatSelectedOption = newModel; 
    ApplyThinkingOptionsForModel(newModel);
    StateHasChanged(); 
  }

  private void ApplyThinkingOptionsForModel(string modelName)
  {
    if (_modelThinkingOptionsMap.TryGetValue(modelName, out var options))
    {
      _currentThinkingOptions = options;
      if (modelName == "llama-3.1-8b-instant")
      {
        _isThinkingSelectorDisabled = true;
        ThinkingSelectedOption = "None"; 
      }
      else
      {
        _isThinkingSelectorDisabled = false;
        if (!_currentThinkingOptions.Contains(ThinkingSelectedOption))
        {
          ThinkingSelectedOption = _currentThinkingOptions.FirstOrDefault() ?? "None";
        }
      }
    }
    else
    {
      _currentThinkingOptions = ThinkingOptionsNoneLowMediumHigh;
      _isThinkingSelectorDisabled = false;
      if (!_currentThinkingOptions.Contains(ThinkingSelectedOption))
      {
        ThinkingSelectedOption = "None";
      }
    }
  }

  private async Task LoadSidebarChatsAsync()
  {
    var list = await ChatService.GetChatsAsync();
    SidebarChats = list
      .OrderByDescending(c => c.IsPinned)
      .ThenByDescending(c => c.LastUpdatedAt)
      .Select(c => new ChatDrawer.SidebarChat(c.Id.ToString(), c.Name, c.Model, c.IsPinned, c.LastUpdatedAt))
      .ToList();
  }

  private async Task CreateNewChat()
  {
    _chatId = null;
    _chatName = "New Chat";
    _chatHistory.Clear();
    _chatIsPinned = false;
    CurrentMessageFiles.Clear(); 
    StateHasChanged();
  }

  private async Task LoadChat(ChatDrawer.SidebarChat chat)
  {
    if (_chatId == chat.Id && _chatHistory.Any()) return; 

    var fullChat = await ChatService.GetChatAsync(Guid.Parse(chat.Id));
    _chatId = fullChat.Id.ToString();
    _chatName = fullChat.Name;
    ChatSelectedOption = fullChat.Model;
    ApplyThinkingOptionsForModel(fullChat.Model); 
    _chatIsPinned = fullChat.IsPinned;
    _chatHistory = fullChat.Messages
      .Select(m => new ChatMessage // m here is ChatService.ChatMessageDto
      {
        IsUser = m.Role == "user",
        Text = m.Content, // Correct: DTO has Content, local record has Text
        FileIds = m.FileIds?.ToList() ?? new List<Guid>()
      })
      .ToList();
    CurrentMessageFiles.Clear(); 
    _needsScroll = true;
    StateHasChanged();
  }

  private List<ServiceChatMessage> ToServiceChatMessages() => // Renamed for clarity
    _chatHistory.Select(m => new ServiceChatMessage // This is m1Chat.Client.Services.ChatMessage
    {
      Role = m.IsUser ? "user" : "assistant",
      Content = m.Text, // m is local ChatMessage record, which has Text
      // FileIds are handled by ToSharedMessagesWithFilesForDb when saving
    }).ToList();

  [JSInvokable]
  public void SetAtBottom(bool atBottom) => _isAtBottom = atBottom;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await Js.InvokeVoidAsync(
        "chatScroll.onScroll",
        _chatContainerRef,
        DotNetObjectReference.Create(this)
      );
    }

    if (_needsScroll && _isAtBottom)
    {
      await ScrollManager.ScrollToBottomAsync(
        ".chat-container",
        ScrollBehavior.Smooth
      );
      _needsScroll = false;
    }
  }

  private async Task HandleKeyUp(KeyboardEventArgs args)
  {
    if (args.Key == "Enter" && !args.ShiftKey && !args.CtrlKey && !args.AltKey) 
    {
        if (!string.IsNullOrWhiteSpace(MessageText) || CurrentMessageFiles.Any())
        {
            await SendMessage();
        }
    }
  }

  private async Task SendMessage()
  {
    if (_isSendingMessage) return;

    var textToSend = MessageText.Trim();
    if (string.IsNullOrWhiteSpace(textToSend) && !CurrentMessageFiles.Any()) // Allow sending if only files are attached
    {
      return;
    }
    
    _isSendingMessage = true;
    StateHasChanged(); 

    var fileIds = CurrentMessageFiles.Select(f => f.Id).ToList();

    _chatHistory.Add(new ChatMessage { 
      IsUser = true, 
      Text = textToSend, 
      FileIds = fileIds 
    });
    var userMessageTextForName = textToSend; 
    MessageText = "";
    CurrentMessageFiles.Clear(); 
    _isAtBottom = true;
    _needsScroll = true;
    StateHasChanged();

    bool isNewChat = _chatId == null;
    Guid newChatGuid = Guid.Empty;

    if (isNewChat)
    {
      _chatName = "New Chat"; 
      var initialMessagesForName = new List<ServiceChatMessage> {
          new() { Role = "user", Content = $"Generate a brief, relevant chat name (under 5 words, no quotes) for this conversation that starts with: \"{userMessageTextForName[..Math.Min(100, userMessageTextForName.Length)]}\"" }
      };
      
      string tempName = string.IsNullOrWhiteSpace(userMessageTextForName) ? "Chat with Files" : (userMessageTextForName.Length <= 20 ? userMessageTextForName : userMessageTextForName.Substring(0, 20) + "...");

      var createReq = new ChatService.CreateChatRequest(
        tempName, 
        ChatSelectedOption, 
        new ChatService.ChatMessageDto[] { new ChatService.ChatMessageDto("user", userMessageTextForName, fileIds) }, 
        _chatIsPinned
      );
      newChatGuid = await ChatService.CreateChatAsync(createReq);
      _chatId = newChatGuid.ToString();
      NavigationManager.NavigateTo($"/Chat?chatId={_chatId}", forceLoad: false);

      string generatedName = "";
      try
      {
          await foreach (var chunk in CompletionService.StreamCompletionAsync(
                           initialMessagesForName,
                           "llama-3.1-8b-instant", 
                           "Low" 
                         ))
          {
            generatedName += chunk;
          }
          _chatName = !string.IsNullOrWhiteSpace(generatedName)
            ? generatedName.Trim().Trim('"', '\'').Replace("\n", " ").Truncate(50)
            : tempName;
      }
      catch(Exception ex)
      {
          Console.WriteLine($"Name generation failed: {ex.Message}");
          _chatName = tempName; 
      }
        var updateNameReq = new ChatService.UpdateChatRequest(
            _chatName,
            ChatSelectedOption,
            new ChatService.ChatMessageDto[] { new ChatService.ChatMessageDto("user", userMessageTextForName, fileIds) },
            _chatIsPinned
        );
        await ChatService.UpdateChatAsync(newChatGuid, updateNameReq);
        await LoadSidebarChatsAsync(); 
    }

    var aiMessage = new ChatMessage { IsUser = false, Text = "" };
    _chatHistory.Add(aiMessage);
    _needsScroll = true;
    StateHasChanged();

    try
    {
      int chunkCount = 0;
      var lastUpdate = DateTime.UtcNow;
      
      // Prepare messages for AI, including file content (handled by server-side CompletionService)
      var messagesForAi = _chatHistory
        .Take(_chatHistory.Count - 1) // Exclude the placeholder AI message
        .Select(m => new ServiceChatMessage // Use m1Chat.Client.Services.ChatMessage
        {
            Role = m.IsUser ? "user" : "assistant",
            Content = m.Text,
            FileIds = m.FileIds // Pass FileIds to client-side service
        }).ToList();

      await foreach (var chunk in CompletionService.StreamCompletionAsync(
                       messagesForAi, 
                       ChatSelectedOption,
                       ThinkingSelectedOption 
                     ))
      {
        aiMessage.Text += chunk;
        chunkCount++;
        _needsScroll = true;

        var now = DateTime.UtcNow;
        if ((now - lastUpdate).TotalMilliseconds >= 100 || chunkCount <= 5) 
        {
          lastUpdate = now;
          await InvokeAsync(StateHasChanged);
        }
      }
      await InvokeAsync(StateHasChanged); 

      if (chunkCount == 0 && string.IsNullOrWhiteSpace(aiMessage.Text))
      {
        aiMessage.Text = "[No response received from AI]";
        await InvokeAsync(StateHasChanged);
      }
    }
    catch (Exception ex)
    {
      aiMessage.Text = $"[Error: {ex.Message}]";
      Console.WriteLine($"Error streaming completion: {ex}");
      await InvokeAsync(StateHasChanged);
    }
    finally
    {
        _isSendingMessage = false;
        StateHasChanged(); 
    }

    if (Guid.TryParse(_chatId, out var cId))
    {
      var updateReq = new ChatService.UpdateChatRequest(
        _chatName,
        ChatSelectedOption,
        ToSharedMessagesWithFilesForDb().ToArray(),
        _chatIsPinned
      );
      await ChatService.UpdateChatAsync(cId, updateReq);
      await LoadSidebarChatsAsync();
      }
  }

  // Used for saving to DB via ChatService (expects DTOs with FileIds)
  private List<ChatService.ChatMessageDto> ToSharedMessagesWithFilesForDb() =>
    _chatHistory.Select(m => new ChatService.ChatMessageDto(
      m.IsUser ? "user" : "assistant", 
      m.Text, // Corrected: m is local ChatMessage, which has .Text
      m.FileIds
    )).ToList();

  private async Task TriggerFileUpload()
  {
    // This is a bit of a hack to "click" the hidden file input
    // The FileUploadComponent's <MudFileUpload> creates an <input type="file">
    // We need to find its ID and click it.
    // The ID is available via the 'context' in ButtonTemplate, which we named 'fileUploadId'
    // However, we can't directly access that from here easily.
    // A more robust way is to have the FileUploadComponent expose a method or use JS interop.

    // For now, let's assume the user will click the "Upload Files" button within FileUploadComponent.
    // If you want the "AttachFile" icon to also trigger it, you'd need a more complex setup.
    // One way:
    // 1. In FileUploadComponent, add a public method: public void TriggerClick() { JS.InvokeVoidAsync("clickElementById", _internalInputId); }
    // 2. Get a @ref to FileUploadComponent here: <FileUploadComponent @ref="_fileUploadComponentRef" ... />
    // 3. Call _fileUploadComponentRef.TriggerClick();
    // This requires FileUploadComponent to store its input's ID.

    // Simpler: just show the component if it's not already visible.
    // The actual upload is handled by FileUploadComponent.
    Snackbar.Add("Use the 'Upload Files' button to select files.", Severity.Info);
  }


  private async Task PinChat(ChatDrawer.SidebarChat chat)
  {
    if (Guid.TryParse(chat.Id, out var chatId))
    {
      await ChatService.PinChatAsync(chatId, !chat.IsPinned);
      await LoadSidebarChatsAsync(); 
      if (_chatId == chat.Id) _chatIsPinned = !chat.IsPinned; 
      StateHasChanged();
    }
  }

  private async Task DeleteChat(ChatDrawer.SidebarChat chat)
  {
    if (Guid.TryParse(chat.Id, out var chatId))
    {
      await ChatService.DeleteChatAsync(chatId);
      SidebarChats.RemoveAll(c => c.Id == chat.Id); 
      if (_chatId == chat.Id) {
          if (SidebarChats.Any()) {
              await LoadChat(SidebarChats.First());
          } else {
              await CreateNewChat();
          }
      }
      StateHasChanged();
    }
  }

  private async Task HandleChatRenamed(ChatDrawer.SidebarChat updatedChat)
  {
    var fullChat = await ChatService.GetChatAsync(Guid.Parse(updatedChat.Id));
    var updateReq = new ChatService.UpdateChatRequest(
      updatedChat.Name,
      updatedChat.Model,
      fullChat.Messages, // These are ChatService.ChatMessageDto
      updatedChat.IsPinned
    );
    await ChatService.UpdateChatAsync(Guid.Parse(updatedChat.Id), updateReq);
    await LoadSidebarChatsAsync();
    if (_chatId == updatedChat.Id) _chatName = updatedChat.Name;
    StateHasChanged();
  }

  private async Task HandleRegenerateMessage(ChatMessage messageToRegen)
  {
    if (_isSendingMessage) return;
    _isSendingMessage = true;
    StateHasChanged();

    var idx = _chatHistory.IndexOf(messageToRegen);
    if (idx == -1) {
        _isSendingMessage = false;
        StateHasChanged();
        return;
    }

    List<ServiceChatMessage> messagesToSendForAi; // Use m1Chat.Client.Services.ChatMessage
    ChatMessage targetAiMessage; // Local Chat.razor ChatMessage

    if (messageToRegen.IsUser) 
    {
        _chatHistory.RemoveAll(m => _chatHistory.IndexOf(m) > idx && !m.IsUser);
        if (idx + 1 < _chatHistory.Count && !_chatHistory[idx + 1].IsUser)
        {
            _chatHistory.RemoveAt(idx + 1);
        }

        messagesToSendForAi = _chatHistory.Take(idx + 1) 
            .Select(x => new ServiceChatMessage { 
                Role = x.IsUser ? "user" : "assistant", 
                Content = x.Text,
                FileIds = x.FileIds // Pass FileIds
            })
            .ToList();
        
        targetAiMessage = new ChatMessage { IsUser = false, Text = "" };
        if (idx + 1 < _chatHistory.Count) _chatHistory.Insert(idx + 1, targetAiMessage);
        else _chatHistory.Add(targetAiMessage);
    }
    else 
    {
        _chatHistory[idx] = new ChatMessage { IsUser = false, Text = "" }; 
        targetAiMessage = _chatHistory[idx];

        messagesToSendForAi = _chatHistory.Take(idx) 
            .Select(x => new ServiceChatMessage { 
                Role = x.IsUser ? "user" : "assistant", 
                Content = x.Text,
                FileIds = x.FileIds // Pass FileIds
            })
            .ToList();
    }
    
    _needsScroll = true;
    StateHasChanged();

    try
    {
        int chunkCount = 0;
        var lastUpdate = DateTime.UtcNow;
        await foreach (var chunk in CompletionService.StreamCompletionAsync(
                           messagesToSendForAi,
                           ChatSelectedOption,
                           ThinkingSelectedOption 
                         ))
        {
            targetAiMessage.Text += chunk;
            chunkCount++;
            _needsScroll = true;

            var now = DateTime.UtcNow;
            if ((now - lastUpdate).TotalMilliseconds >= 100 || chunkCount <= 5)
            {
                lastUpdate = now;
                await InvokeAsync(StateHasChanged);
            }
        }
        await InvokeAsync(StateHasChanged);

        if (chunkCount == 0 && string.IsNullOrWhiteSpace(targetAiMessage.Text))
        {
            targetAiMessage.Text = "[No response received from AI for regeneration]";
            await InvokeAsync(StateHasChanged);
        }
    }
    catch (Exception ex)
    {
        targetAiMessage.Text = $"[Error regenerating: {ex.Message}]";
        Console.WriteLine($"Error regenerating message: {ex}");
        await InvokeAsync(StateHasChanged);
    }
    finally
    {
        _isSendingMessage = false;
        StateHasChanged();
    }

    if (Guid.TryParse(_chatId, out var cId))
    {
        var updateReq = new ChatService.UpdateChatRequest(
            _chatName,
            ChatSelectedOption,
            ToSharedMessagesWithFilesForDb().ToArray(),
            _chatIsPinned
        );
        await ChatService.UpdateChatAsync(cId, updateReq);
    }
  }

  private void HandleEditMessage(ChatMessage m) {
    MessageText = m.Text; 
    // Restore files for editing if they were part of this message
    CurrentMessageFiles = m.FileIds
        .Select(fid => new FileUploadService.UploadedFileInfo { Id = fid, OriginalFileName = $"File_{fid.ToString()[..4]}..." }) // Placeholder name, real info not stored here
        .ToList();
    Snackbar.Add("Message content and associated files (if any) restored for editing.", Severity.Info);
    StateHasChanged(); 
  }


  private async Task HandleCopyMessage(ChatMessage m)
  {
    try
    {
      await Js.InvokeVoidAsync("navigator.clipboard.writeText", m.Text);
      Snackbar.Add("Message copied to clipboard", Severity.Success);
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Failed to copy: {ex.Message}", Severity.Error);
    }
  }

  private async Task HandleBranchMessage(ChatMessage messageToBranchFrom)
  {
    var idx = _chatHistory.IndexOf(messageToBranchFrom);
    if (idx == -1) return;

    var branchChatHistory = _chatHistory.Take(idx + 1).ToList(); // List of local ChatMessage

    var branchName = $"Branch: {_chatName}".Truncate(50);
    var createReq = new ChatService.CreateChatRequest(
      branchName,
      ChatSelectedOption, 
      branchChatHistory.Select(m => new ChatService.ChatMessageDto(
          m.IsUser ? "user" : "assistant", 
          m.Text, 
          m.FileIds)
      ).ToArray(),
      false 
    );
    var newId = await ChatService.CreateChatAsync(createReq);

    await LoadSidebarChatsAsync(); 

    var newSidebarChat = SidebarChats.FirstOrDefault(c => c.Id == newId.ToString());
    if (newSidebarChat != null)
    {
      await LoadChat(newSidebarChat); 
      Snackbar.Add("Chat branched successfully", Severity.Success);
    }
    else
    {
      _chatId = newId.ToString();
      _chatName = branchName;
      _chatHistory = branchChatHistory; // Assign the branched history
      _chatIsPinned = false;
      CurrentMessageFiles.Clear(); // Clear any pending files for the new branch
      NavigationManager.NavigateTo($"/Chat?chatId={_chatId}", forceLoad: false);
      Snackbar.Add("Chat branched, but could not auto-load. Please select from sidebar.", Severity.Warning);
      StateHasChanged();
    }
  }

  // This is the local record for UI state in Chat.razor
  private record ChatMessage
  {
    public string Id { get; init; } = Guid.NewGuid().ToString();
    public bool IsUser { get; init; }
    public string Text { get; set; } = ""; // Property is 'Text'
    public List<Guid> FileIds { get; init; } = new();
  }
}