@page "/Chat"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using Markdig
@using m1Chat.Client.Components
@using m1Chat.Client.Services
@inject NavigationManager NavigationManager
@inject IScrollManager ScrollManager
@inject ChatCompletionService CompletionService
@inject ChatService ChatService
@inject IJSRuntime JS
@using ServiceChatMessage = m1Chat.Client.Services.ChatMessage
@inject UserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudLayout>
  <ChatDrawer @bind-DrawerOpen="_drawerOpen"
              SidebarChats="SidebarChats"
              UserEmail="@UserEmail"
              ActiveChatId="@ChatId"
              OnChatSelected="LoadChat"
              OnCreateNewChat="CreateNewChat"
              OnChatPinned="PinChat"
              OnChatDeleted="DeleteChat"
              OnChatRenamed="HandleChatRenamed"/>

  <MudMainContent
    Class="d-flex flex-column p-0 chat-main-content-bg"
    Style="height:100vh;overflow:hidden;"
  >
    @if (!_drawerOpen)
    {
      <MudIconButton
        Icon="@Icons.Material.Filled.ChevronRight"
        OnClick="() => _drawerOpen = true"
        Color="Color.Primary"
        Class="ma-2"
        Style="position: fixed; left: 0; top: 0; z-index: 100; background-color: var(--mud-palette-background); box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
        aria-label="Open menu"
      />
    }

    <div
      class="chat-container px-2 pb-2 no-scrollbar"
      @ref="_chatContainerRef"
      style="overflow-y:auto; flex:1 1 auto;"
    >
      <MudPaper Elevation="0">
        <MudStack Spacing="4">
          @foreach (var m in ChatHistory)
          {
            if (m.IsUser)
            {
              <MudStack JustifyContent="FlexEnd">
                <div class="user-message-container">
                  <MudChatBubble
                    Variant="Variant.Text"
                    Class="user-message"
                  >
                    <UserMarkdown Markdown="@m.Text"/>
                  </MudChatBubble>
                  <div class="message-actions">
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Outlined.Refresh"
                        Size="Size.Small"
                        OnClick="@(() => HandleRegenerateMessage(m))"
                        aria-label="Regenerate"
                        Title="Regenerate"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.Edit"
                        Size="Size.Small"
                        OnClick="@(() => HandleEditMessage(m))"
                        aria-label="Edit"
                        Title="Edit"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.ContentCopy"
                        Size="Size.Small"
                        OnClick="@(async () => await HandleCopyMessage(m))"
                        aria-label="Copy"
                        Title="Copy"
                      />
                    </span>
                  </div>
                  <div class="user-message-hoverzone"></div>
                </div>
              </MudStack>
            }
            else
            {
              <MudStack JustifyContent="FlexStart">
                <div class="ai-message-container">
                  <AiMarkdown Markdown="@m.Text"/>
                  <div class="message-actions">
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.ContentCopy"
                        Size="Size.Small"
                        OnClick="@(async () => await HandleCopyMessage(m))"
                        aria-label="Copy"
                        Title="Copy"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.MergeType"
                        Size="Size.Small"
                        OnClick="@(() => HandleBranchMessage(m))"
                        aria-label="Branch"
                        Title="Branch"
                      />
                    </span>
                    <span @onclick:stopPropagation="true">
                      <MudIconButton
                        Icon="@Icons.Material.Filled.Refresh"
                        Size="Size.Small"
                        OnClick="@(() => HandleRegenerateMessage(m))"
                        aria-label="Regenerate"
                        Title="Regenerate"
                      />
                    </span>
                  </div>
                  <div class="ai-message-hoverzone"></div>
                </div>
              </MudStack>
            }
          }
        </MudStack>
      </MudPaper>
    </div>

    <div class="input-area-container">
      <MudPaper Elevation="0" Class="pa-2 flex-shrink-0">
        <MudContainer Class="pa-0">
          <div style="display:flex;flex-direction:column;">
            <div style="display:flex;align-items:center;">
              <MudTextField
                @bind-Value="MessageText"
                Label="Enter your message"
                Variant="Variant.Outlined"
                Lines="2"
                AutoGrow="true"
                MaxLines="10"
                Class="flex-grow-1"
                Immediate="true"
                @onkeyup="HandleKeyUp"
              />
            </div>
            <div
              style="display:flex;align-items:center;margin-top:8px;"
            >
              <MudSelect
                @bind-Value="ChatSelectedOption"
                Label="Select a model"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                FitContent="true"
                Class="mr-2"
              >
                @foreach (var opt in ChatOptions)
                {
                  <MudSelectItem Value="@opt">@opt</MudSelectItem>
                }
              </MudSelect>
              <MudToggleIconButton
                @bind-Toggled="_searchEnabled"
                Icon="@Icons.Material.Filled.Public"
                ToggledIcon="@Icons.Material.Filled.PublicOff"
                Color="Color.Primary"
                ToggledColor="Color.Secondary"
                aria-label="Toggle search"
                Class="ml-2"
              />
              <MudText Typo="Typo.body1" Class="ml-1">
                Search
              </MudText>
              <div
                style="margin-left:auto;display:flex;align-items:center;"
              >
                <MudIconButton
                  Icon="@Icons.Material.Filled.AttachFile"
                  Color="Color.Primary"
                  OnClick="AttachFile"
                  aria-label="Attach file"
                  Class="mr-2"
                />
                <MudButton
                  Variant="Variant.Filled"
                  Color="Color.Primary"
                  EndIcon="@Icons.Material.Filled.Send"
                  OnClick="SendMessage"
                  aria-label="Send message"
                >
                  Send
                </MudButton>
              </div>
            </div>
          </div>
        </MudContainer>
      </MudPaper>
    </div>
  </MudMainContent>
</MudLayout>

@code {
  private bool _drawerOpen = true;
  private bool _searchEnabled = false;
  private bool _needsScroll;
  private bool _isAtBottom = true;

  private ElementReference _chatContainerRef;

  private string UserEmail { get; set; } = "";
  private string MessageText { get; set; } = "";

  // <-- your model selector binding
  private string ChatSelectedOption { get; set; } = "DeepSeek v3";

  private List<string> ChatOptions = new()
  {
    "DeepSeek v3",
    "DeepSeek Prover v2",
    "Gemini 2.5 Pro",
    "Deepseek r1",
    "Gemini 2.0 Flash",
    "Qwen3 235B",
    "DeepSeek r1 v3 Chimera",
    "Gemma 3 27B",
    "Qwen3 30B",
    "llama-3.1-8b-instant"
  };

  private string? ChatId;
  private string ChatName = "New Chat";
  private List<ChatMessage> ChatHistory = new();

  private List<ChatDrawer.SidebarChat> SidebarChats = new();

  protected override async Task OnInitializedAsync()
  {
    UserEmail = await UserService.GetUserEmailAsync() ?? "Unknown";
    await LoadSidebarChatsAsync();
  }

  private async Task LoadSidebarChatsAsync()
  {
    var list = await ChatService.GetChatsAsync();
    SidebarChats = list
      .Select(c => new ChatDrawer.SidebarChat(c.Id.ToString(), c.Name, c.Model))
      .ToList();
  }

  private async Task CreateNewChat()
  {
    ChatId = null;
    ChatName = "New Chat";
    ChatHistory.Clear();
    StateHasChanged();
  }

  private async Task LoadChat(ChatDrawer.SidebarChat chat)
  {
    var full = await ChatService.GetChatAsync(Guid.Parse(chat.Id));
    ChatId = full.Id.ToString();
    ChatName = full.Name;
    ChatSelectedOption = full.Model;
    ChatHistory = full.Messages
      .Select(m => new ChatMessage
      {
        IsUser = m.Role == "user",
        Text = m.Content
      })
      .ToList();

    _needsScroll = true;
    StateHasChanged();
  }

  private List<ServiceChatMessage> ToSharedMessages() =>
    ChatHistory.Select(m => new ServiceChatMessage
    {
      Role = m.IsUser ? "user" : "assistant",
      Content = m.Text
    }).ToList();

  [JSInvokable]
  public void SetAtBottom(bool atBottom) => _isAtBottom = atBottom;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync(
        "chatScroll.onScroll",
        _chatContainerRef,
        DotNetObjectReference.Create(this)
      );
    }

    if (_needsScroll && _isAtBottom)
    {
      await ScrollManager.ScrollToBottomAsync(
        ".chat-container",
        ScrollBehavior.Smooth
      );
      _needsScroll = false;
    }
  }

  private async Task HandleKeyUp(KeyboardEventArgs args)
  {
    if (args.Key == "Enter" && !args.ShiftKey)
      await SendMessage();
  }

  private async Task SendMessage()
{
    var time = DateTime.Now;
    var textToSend = MessageText.Trim();
    if (string.IsNullOrWhiteSpace(textToSend))
        return;

    // Add user message
    ChatHistory.Add(new ChatMessage { IsUser = true, Text = textToSend });
    MessageText = "";
    _isAtBottom = true;
    _needsScroll = true;
    StateHasChanged();

    bool isNewChat = ChatId == null;

    // If new chat, create on server and generate name
    if (isNewChat)
    {
        // Generate initial temporary name (will be replaced)
        ChatName = "New Chat";

        // Create the chat with temporary name first
        var createReq = new ChatService.CreateChatRequest(
            ChatName,
            "llama-3.1-8b-instant", // Use llama for name generation
            new[]
            {
                new ChatService.ChatMessageDto("user",
                    $"Generate a brief, relevant chat name (under 5 words) for this conversation:\n\n{textToSend[..Math.Min(100, textToSend.Length)]}")
            }
        );
        var newId = await ChatService.CreateChatAsync(createReq);
        ChatId = newId.ToString();

        // Immediately refresh sidebar so the new chat appears
        await LoadSidebarChatsAsync();

        try
        {
            // Get the generated name from llama model
            string generatedName = "";
            await foreach (var chunk in CompletionService.StreamCompletionAsync(
                             new List<ServiceChatMessage>
                             {
                                 new()
                                 {
                                     Role = "user",
                                     Content = $"Generate a brief, relevant chat name (under 5 words, no quotes) for this conversation:\n\n{textToSend[..Math.Min(100, textToSend.Length)]}"
                                 }
                             },
                             "llama-3.1-8b-instant" // Use llama specifically for naming
                           ))
            {
                generatedName += chunk;
            }

            // Clean up the generated name and ensure it's not empty
            ChatName = !string.IsNullOrWhiteSpace(generatedName)
                ? generatedName.Trim().Trim('"', '\'').Replace("\n", " ").Truncate(50)
                : textToSend.Length <= 20
                    ? textToSend
                    : textToSend[..20] + "...";
        }
        catch
        {
            // Fallback if name generation fails
            ChatName = textToSend.Length <= 20
                ? textToSend
                : textToSend[..20] + "...";
        }
    }

    // Placeholder for AI response
    var aiMessage = new ChatMessage { IsUser = false, Text = "" };
    ChatHistory.Add(aiMessage);
    _needsScroll = true;
    StateHasChanged();

    try
    {
        int chunkCount = 0;
        var lastUpdate = DateTime.UtcNow;
        // Use the selected model for the actual response (not llama)
        await foreach (var chunk in CompletionService.StreamCompletionAsync(
                           ToSharedMessages(),
                           ChatSelectedOption // Use the user-selected model for the response
                         ))
        {
            aiMessage.Text += chunk;
            chunkCount++;
            _needsScroll = true;

            var now = DateTime.UtcNow;
            if ((now - lastUpdate).TotalMilliseconds >= 100)
            {
                lastUpdate = now;
                await InvokeAsync(StateHasChanged);
            }
        }

        // Ensure final state is rendered
        await InvokeAsync(StateHasChanged);

        if (chunkCount == 0)
        {
            aiMessage.Text = "[No response received from AI]";
            await InvokeAsync(StateHasChanged);
        }
    }
    catch (Exception ex)
    {
        aiMessage.Text = $"[Error: {ex.Message}]";
        await InvokeAsync(StateHasChanged);
    }

    // Update chat on server with final name and messages
    if (Guid.TryParse(ChatId, out var cId))
    {
        var updateReq = new ChatService.UpdateChatRequest(
            ChatName,
            ChatSelectedOption, // Update with user-selected model, not llama
            ToSharedMessages()
                .Select(m => new ChatService.ChatMessageDto(m.Role, m.Content))
                .ToArray()
        );
        await ChatService.UpdateChatAsync(cId, updateReq);

        // Refresh sidebar again to update name and last message
        await LoadSidebarChatsAsync();
    }
}

  private void AttachFile() => Console.WriteLine("Attach file clicked.");

  private async Task PinChat(ChatDrawer.SidebarChat chat)
  {
    var updatedChat = chat with { IsPinned = true };
    SidebarChats.Remove(chat);
    SidebarChats.Insert(0, updatedChat);
    StateHasChanged();
  }

  private async Task DeleteChat(ChatDrawer.SidebarChat chat)
  {
    if (Guid.TryParse(chat.Id, out var chatId))
    {
      await ChatService.DeleteChatAsync(chatId);
      SidebarChats.Remove(chat);
      if (ChatId == chat.Id) await CreateNewChat();
      StateHasChanged();
    }
  }

  private async Task HandleChatRenamed(ChatDrawer.SidebarChat updatedChat)
  {
    var updateReq = new ChatService.UpdateChatRequest(
      updatedChat.Name,
      updatedChat.Model,
      (await ChatService.GetChatAsync(Guid.Parse(updatedChat.Id))).Messages
    );
    await ChatService.UpdateChatAsync(Guid.Parse(updatedChat.Id), updateReq);
    await LoadSidebarChatsAsync();
    if (ChatId == updatedChat.Id) ChatName = updatedChat.Name;
    StateHasChanged();
  }

  private void HandleRegenerateMessage(ChatMessage m) =>
    Console.WriteLine($"Regenerate message: {m.Id}");

  private void HandleEditMessage(ChatMessage m) =>
    Console.WriteLine($"Edit message: {m.Id}");

  private async Task HandleCopyMessage(ChatMessage m)
  {
    try
    {
      await JS.InvokeVoidAsync("navigator.clipboard.writeText", m.Text);
      Snackbar.Add("Message copied to clipboard", Severity.Success);
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Failed to copy: {ex.Message}", Severity.Error);
    }
  }

  private void HandleBranchMessage(ChatMessage m) =>
    Console.WriteLine($"Branch message: {m.Id}");

  private record ChatMessage
  {
    public string Id { get; init; } = Guid.NewGuid().ToString();
    public bool IsUser { get; init; }
    public string Text { get; set; } = "";
  }

}
