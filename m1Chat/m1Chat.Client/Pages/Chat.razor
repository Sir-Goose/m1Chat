@page "/Chat"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using Markdig
@using m1Chat.Client.Components
@inject NavigationManager NavigationManager
@inject IScrollManager ScrollManager

<style>
    /* Hide native scrollbars but keep vertical scrolling */
    .no-scrollbar {
        overflow-y: auto;
        overflow-x: hidden;
        -ms-overflow-style: none; /* IE/Edge */
        scrollbar-width: none; /* Firefox */
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none; /* Chrome/Safari/Opera */
    }

    /* Kill MudMainContent's top-padding (for an AppBar) */
    .mud-main-content {
        padding-top: 0 !important;
    }

    /* Set MudMainContent background to surface color for this chat page */
    .chat-main-content-bg {
        background-color: var(--mud-palette-surface);
    }

    /* Chat viewport height (subtract header+footer) */
    .chat-container {
        overflow-y: auto;
        height: calc(100vh - 128px); /* Assuming input area height is roughly 64px * 2 for header/footer */
    }

    /* User bubble is capped to ~60% width */
    .user-message {
        max-width: 60%;
        margin: auto;
        line-height: 1.43;
        font-size: 1rem;
    }

    /* AI message is plain full-width text */
    .ai-message {
        display: block;
        width: 70%;
        margin: auto;
        white-space: normal;
        line-height: 1.43;
        padding: 1rem;
    }

    /* Input area width matches AI message */
    .input-area-container {
        width: 70%;
        margin: 0 auto;
    }

    /* Style the horizontal rule within .ai-message AND .user-message */
    .ai-message hr,
    .user-message hr {
        border: none;
        height: 1px;
        background-color: var(--mud-palette-primary);
        padding: 0;
        margin: 1rem 0;
    }

    /* Heading styles with padding */
    .ai-message h1,
    .user-message h1 {
        padding: 1.5rem 0 1.5rem 0;
        margin: 0;
    }

    .ai-message h2,
    .user-message h2 {
        padding: 1.25rem 0 1.25rem 0;
        margin: 0;
    }

    .ai-message h3,
    .user-message h3 {
        padding: 1rem 0 1rem 0;
        margin: 0;
    }

    .ai-message h4,
    .ai-message h5,
    .ai-message h6,
    .user-message h4,
    .user-message h5,
    .user-message h6 {
        padding: 0.75rem 0 0.75rem 0;
        margin: 0;
    }

    /* restore list styling inside .ai-message AND .user-message */
    .ai-message ul,
    .ai-message ol,
    .user-message ul,
    .user-message ol {
        padding: 0.75rem;
        list-style-position: inside;
    }

    .ai-message ul li::marker,
    .ai-message ol li::marker,
    .user-message ul li::marker,
    .user-message ol li::marker {
        color: var(--mud-palette-primary);
    }

    .ai-message li,
    .user-message li {
        margin: 1rem 0;
    }

    /* Style blockquotes within .ai-message AND .user-message */
    .ai-message blockquote,
    .user-message blockquote {
        border-left: 4px solid var(--mud-palette-primary-lighten);
        padding: 0rem 0rem;
        margin: 1rem 0;
        background-color: var(--mud-palette-background-grey);
        color: var(--mud-palette-text);
        font-style: italic;
    }

    /* Ensure paragraphs inside blockquotes don't add extra margin */
    .ai-message blockquote p,
    .user-message blockquote p {
        margin-bottom: 0;
        padding: 0.75rem;
    }

    /* style links so they are primary color and bold */
    .ai-message a,
    .user-message a {
        color: var(--mud-palette-primary);
        text-decoration: underline;
        font-weight: bold;
    }

    /* Customized code-block styling */
    .ai-message pre,
    .user-message pre {
        background: var(--mud-palette-background); /* Or var(--mud-palette-surface) if you want it to blend more */
        border: 1px solid var(--mud-palette-divider);
        border-left: 3px solid var(--mud-palette-primary);
        border-radius: 4px;
        padding: 0.75rem;
        margin: 1rem 0;
        font-family: Consolas, Monaco, 'Courier New', monospace;
        font-size: 0.875rem;
        line-height: 1.4;
        overflow-x: auto;
        max-width: 100%;
    }

    .ai-message pre code,
    .user-message pre code {
        display: block;
        color: var(--mud-palette-text-primary);
        background: transparent;
        white-space: pre;
    }

    /* Table styling inside .ai-message AND .user-message */
    .ai-message table,
    .user-message table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
        font-size: 1rem;
        overflow-x: auto;
        display: block;
        border: none;
        max-width: 100%;
    }

    .ai-message th,
    .ai-message td,
    .user-message th,
    .user-message td {
        border: none;
        border-bottom: 1px solid var(--mud-palette-divider);
        padding: 0.75rem 1rem;
        text-align: left;
        vertical-align: top;
    }

    .ai-message th,
    .user-message th {
        font-weight: 600;
        border-bottom: 1px solid var(--mud-palette-drawer-text);
    }

    .ai-message tr:first-of-type td,
    .user-message tr:first-of-type td {
        border-bottom: 1px solid var(--mud-palette-divider);
    }

    .ai-message caption,
    .user-message caption {
        caption-side: bottom;
        padding: 0.5rem;
        color: var(--mud-palette-text-secondary);
        font-size: 0.95em;
        text-align: left;
    }

    /* Sidebar chat row hover actions */
    .sidebar-chat-row {
        position: relative;
        display: flex;
        align-items: center;
        padding-right: 2.5rem; /* space for buttons */
        cursor: pointer;
    }

    .sidebar-chat-row .chat-actions {
        display: flex;
        gap: 0.25rem;
        position: absolute;
        right: 0.5rem;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.15s;
    }

    .sidebar-chat-row:hover .chat-actions {
        opacity: 1;
        pointer-events: auto;
    }
</style>

<MudLayout>
    <MudDrawer
        @bind-Open="_drawerOpen"
        Anchor="Anchor.Left"
        Elevation="1"
        Variant="DrawerVariant.Persistent"
        Class="d-flex flex-column"
    >
        <MudDrawerHeader Class="d-flex flex-column pa-2">
            <div class="d-flex align-center justify-space-between">
                <MudText Typo="Typo.h6">M1 Chat</MudText>
                <MudIconButton
                    Icon="@Icons.Material.Filled.ChevronLeft"
                    OnClick="ToggleDrawer"
                />
            </div>
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="mt-2"
                FullWidth="true"
            >
                New Chat
            </MudButton>
        </MudDrawerHeader>

        <div class="flex-grow-1 no-scrollbar">
            <MudList T="string">
                @foreach (var chat in SidebarChats)
                {
                    <div class="sidebar-chat-row">
                        <MudListItem Text="@chat.Name"/>
                        <span class="chat-actions">
                            <MudIconButton
                                Icon="@Icons.Material.Outlined.PushPin"
                                Color="Color.Default"
                                Size="Size.Small"
                                Style="margin-right: 0.25rem;"
                                OnClick="@(() => PinChat(chat))"
                                aria-label="Pin chat"
                            />
                            <MudIconButton
                                Icon="@Icons.Material.Outlined.Delete"
                                Color="Color.Error"
                                Size="Size.Small"
                                OnClick="@(() => DeleteChat(chat))"
                                aria-label="Delete chat"
                            />
                        </span>
                    </div>
                }
            </MudList>
        </div>

        <div class="pa-2">
            <MudText Typo="Typo.subtitle2" Class="mb-1">
                @UserEmail
            </MudText>
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Secondary"
                FullWidth="true"
                OnClick="Logout"
            >
                Logout
            </MudButton>
        </div>
    </MudDrawer>

    <MudMainContent
        Class="d-flex flex-column p-0 chat-main-content-bg"
        Style="height:100vh;overflow:hidden;"
    >
        <MudPaper
            Elevation="0"
            Class="chat-container px-2 pb-2 no-scrollbar"
        >
            <MudStack Spacing="1">
                @foreach (var m in ChatHistory)
                {
                    if (m.IsUser)
                    {
                        <MudStack JustifyContent="FlexEnd">
                            <MudChatBubble
                                Variant="Variant.Text" Class="user-message">
                                <UserMarkdown Markdown="@m.Text"/>
                            </MudChatBubble>
                        </MudStack>
                    }
                    else
                    {
                        <AiMarkdown Markdown="@m.Text"/>
                    }
                }
            </MudStack>
        </MudPaper>

        <div class="input-area-container">
            <MudPaper Elevation="0" Class="pa-2 flex-shrink-0">
                <MudContainer Class="pa-0">
                    <div style="display: flex; flex-direction: column;">
                        <div style="display: flex; align-items: center;">
                            <MudTextField
                                @bind-Value="MessageText"
                                Label="Enter your message"
                                Variant="Variant.Outlined"
                                Lines="2"
                                AutoGrow="true"
                                MaxLines="10"
                                Class="flex-grow-1"
                                Immediate="true"
                                @onkeyup="HandleKeyUp"
                            />
                        </div>
                        <div style="display: flex; align-items: center; margin-top: 8px;">
                            <MudSelect
                                @bind-Value="ChatSelectedOption"
                                Label="Select a model"
                                Variant="Variant.Outlined"
                                Margin="Margin.Dense"
                                FitContent="true"
                                Class="mr-2"
                            >
                                @foreach (var opt in ChatOptions)
                                {
                                    <MudSelectItem Value="@opt">
                                        @opt
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <MudToggleIconButton
                                @bind-Toggled="_searchEnabled"
                                Icon="@Icons.Material.Filled.Public"
                                ToggledIcon="@Icons.Material.Filled.PublicOff"
                                Color="Color.Primary"
                                ToggledColor="Color.Secondary"
                                aria-label="Toggle search"
                                Class="ml-2"
                            />
                            <MudText Typo="Typo.body1" Class="ml-1">Search</MudText>
                            <div style="margin-left: auto; display: flex; align-items: center;">
                                <MudIconButton
                                    Icon="@Icons.Material.Filled.AttachFile"
                                    Color="Color.Primary"
                                    OnClick="AttachFile"
                                    aria-label="Attach file"
                                    Class="mr-2"
                                />
                                <MudButton
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    EndIcon="@Icons.Material.Filled.Send"
                                    OnClick="SendMessage"
                                    aria-label="Send message"
                                >
                                    Send
                                </MudButton>
                            </div>
                        </div>
                    </div>
                </MudContainer>
            </MudPaper>
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _searchEnabled = false;
    private bool _needsScroll;

    private string UserEmail { get; set; } = "user@example.com";
    private string MessageText { get; set; } = "";
    private string ChatSelectedOption { get; set; } = "Gemini 2.5 Pro";

    private List<string> ChatOptions = new()
    {
        "Gemini 2.5 Pro",
        "Gemini 2.5 Flash (Thinking)",
        "Gemini 2.5 Flash"
    };

    private List<ChatMessage> ChatHistory = new()
    {
        new ChatMessage
        {
            IsUser = false,
            Text = "Hello! I am your assistant. How can I help today?\n\nYou can use **Markdown** in your messages too!"
        }
    };

    private List<SidebarChat> SidebarChats = new()
    {
        new SidebarChat { Name = "Chat with Alice" },
        new SidebarChat { Name = "Project Discussion" }
    };

    private void PinChat(SidebarChat chat)
    {
// TODO: Implement pin logic
        Console.WriteLine($"Pin chat: {chat.Name}");
    }

    private void DeleteChat(SidebarChat chat)
    {
        SidebarChats.Remove(chat);
        StateHasChanged();
    }

    private class SidebarChat
    {
        public string Name { get; set; } = "";
// Add more properties as needed (e.g., IsPinned)
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_needsScroll)
        {
            await ScrollManager.ScrollToBottomAsync(".chat-container", ScrollBehavior.Smooth);
            _needsScroll = false;
        }
    }

    void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !args.ShiftKey)
        {
            await SendMessage();
            MessageText = "";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SendMessage()
    {
        var textToSend = MessageText.Trim();
        if (string.IsNullOrWhiteSpace(textToSend)) return;

        ChatHistory.Add(new ChatMessage { IsUser = true, Text = textToSend });
        MessageText = "";
        _needsScroll = true;
        StateHasChanged();

        await Task.Delay(500); // Simulate AI response delay
        ChatHistory.Add(new ChatMessage { IsUser = false, Text = $"Echo: {textToSend}" }); // Simple echo for now
        _needsScroll = true;
        StateHasChanged();
    }

    private void AttachFile() => Console.WriteLine("Attach file clicked.");

    private void Logout()
    {
        Console.WriteLine("Logout clicked");
        NavigationManager.NavigateTo("/");
    }

    private record ChatMessage
    {
        public bool IsUser { get; init; }
        public string Text { get; init; } = "";
    }

}
