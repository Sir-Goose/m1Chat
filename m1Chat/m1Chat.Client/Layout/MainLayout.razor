@inherits LayoutComponentBase

<MudThemeProvider Theme="@M1ChatTheme" IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<style>
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-Bold.woff2') format('woff2');
        font-weight: 700;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-BoldItalic.woff2') format('woff2');
        font-weight: 700;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-ExtraBold.woff2') format('woff2');
        font-weight: 800;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-ExtraBoldItalic.woff2') format('woff2');
        font-weight: 800;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-ExtraLight.woff2') format('woff2');
        font-weight: 200;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-ExtraLightItalic.woff2') format('woff2');
        font-weight: 200;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-Italic.woff2') format('woff2');
        font-weight: 400;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-Light.woff2') format('woff2');
        font-weight: 300;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-LightItalic.woff2') format('woff2');
        font-weight: 300;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-Medium.woff2') format('woff2');
        font-weight: 500;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-MediumItalic.woff2') format('woff2');
        font-weight: 500;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-Regular.woff2') format('woff2');
        font-weight: 400;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-SemiBold.woff2') format('woff2');
        font-weight: 600;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-SemiBoldItalic.woff2') format('woff2');
        font-weight: 600;
        font-style: italic;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-Thin.woff2') format('woff2');
        font-weight: 100;
        font-style: normal;
        font-display: swap;
    }
    @@font-face {
        font-family: 'JetBrains Mono';
        src: url('/fonts/JetBrainsMono-ThinItalic.woff2') format('woff2');
        font-weight: 100;
        font-style: italic;
        font-display: swap;
    }


    .p {
        margin-bottom: 1em;
        margin-top: 1em;
    }
    
    .ai-message p {
        margin-bottom: 1em;
        margin-top: 1em;
    }
    
    .no-scrollbar {
        overflow-y: auto;
        overflow-x: hidden;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .mud-main-content {
        padding-top: 0 !important;
    }

    .chat-main-content-bg {
        background-color: var(--mud-palette-surface);
    }

    .chat-container {
        overflow-y: auto;
        height: calc(100vh - 128px);
    }

    .user-message {
        line-height: 1.43;
        font-size: 1rem;
        margin-top: 2rem
    }

    .user-message-container {
        position: relative;
        width: 70%;
        margin-left: 15%;
    }

    .ai-message-container {
        position: relative;
        width: 70%;
        margin: auto;
    }

    .message-actions {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        margin-top: 0.25rem;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 0.25rem;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.15s ease-in-out 0.1s;
        z-index: 10;
        background-color: rgba(var(--mud-palette-surface-rgb), 0.85);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .user-message-hoverzone,
    .ai-message-hoverzone {
        position: absolute;
        top: calc(100% + 0.5rem); /* just below the buttons */
        left: 0;
        width: 100%;
        height: 32px; /* adjust as needed */
        z-index: 5;
        /* background: rgba(255,0,0,0.05);  Uncomment for debugging */
        pointer-events: auto;
    }

    .user-message-container:hover .message-actions,
    .message-actions:hover,
    .user-message-hoverzone:hover ~ .message-actions,
    .ai-message-container:hover .message-actions,
    .ai-message-hoverzone:hover ~ .message-actions {
        opacity: 1;
        pointer-events: auto;
        transition-delay: 0s;
    }

    .message-actions .mud-icon-button {
        padding: 3px;
    }

    .message-actions .mud-icon-button .mud-icon-root {
        font-size: 1rem;
    }

    .ai-message {
        display: block;
        width: 100%; /* Fixed to fill the container */
        white-space: normal;
        line-height: 1.75;
        /* Original: padding: 1rem; */
        padding-top: 2rem;
        padding-left: 0.3rem;
    }

    .input-area-container {
        width: 70%;
        margin: 0 auto;
    }

    .ai-message hr,
    .user-message hr {
        border: none;
        height: 1px;
        background-color: var(--mud-palette-primary);
        margin: 1rem 0;
    }

    .ai-message h1,
    .user-message h1 {
        padding: 1.5rem 0;
        margin: 0;
    }

    .ai-message h2,
    .user-message h2 {
        padding: 1.25rem 0;
        margin: 0;
    }

    .ai-message h3,
    .user-message h3 {
        padding: 1rem 0;
        margin: 0;
    }

    .ai-message h4,
    .ai-message h5,
    .ai-message h6,
    .user-message h4,
    .user-message h5,
    .user-message h6 {
        padding: 0.75rem 0;
        margin: 0;
    }

    .ai-message ul,
    .ai-message ol,
    .user-message ul,
    .user-message ol {
        padding: 0.75rem;
        list-style-position: outside;
    }

    .ai-message ul li::marker,
    .ai-message ol li::marker,
    .user-message ul li::marker,
    .user-message ol li::marker {
        color: var(--mud-palette-primary);
    }

    .ai-message li,
    .user-message li {
        margin: 1rem 0;
    }

    .ai-message blockquote,
    .user-message blockquote {
        border-left: 4px solid var(--mud-palette-primary-lighten);
        margin: 1rem 0;
        background-color: var(--mud-palette-background-grey);
        color: var(--mud-palette-text);
        font-style: italic;
    }

    .ai-message blockquote p,
    .user-message blockquote p {
        margin-bottom: 0;
        padding: 0.75rem;
    }

    .ai-message a,
    .user-message a {
        color: var(--mud-palette-primary);
        text-decoration: underline;
        font-weight: bold;
    }

    .code-block-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--mud-palette-surface);
        color: var(--mud-palette-appbar-text, #fff);
        padding: 0.4rem 0.75rem;
        border: 1px solid var(--mud-palette-divider);
        border-bottom: 0;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        margin-top: 1rem;
    }

    .language-name {
        font-size: 0.8rem;
        font-family: "JetBrains Mono" ,Consolas, Monaco, 'Courier New', monospace !important;
        color: var(--mud-palette-text-secondary);
        text-transform: capitalize;
    }

    .ai-message pre,
    .user-message pre {
        background: var(--mud-palette-background-grey) !important;
        border: 1px solid var(--mud-palette-divider);
        border-left: 3px solid var(--mud-palette-primary);
        padding: 0.75rem;
        margin: 0 0 1rem 0 !important;
        font-family: "JetBrains Mono" ,Consolas, Monaco, 'Courier New', monospace !important;
        font-size: 0.875rem !important;
        line-height: 1.4;
        overflow-x: auto;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
    }

    .ai-message pre code.language-thinking {
        white-space: pre-wrap;
        overflow-wrap: break-word;
    }

    .ai-message pre code.language-Thinking {
        white-space: pre-wrap;
        overflow-wrap: break-word;
    }

    .ai-message pre code,
    .user-message pre code {
        display: block;
        background: transparent;
        white-space: pre;
        padding: 0;
        margin: 0;
        font-family: inherit;
        font-size: 1em;
        font-weight: normal; /* Ensure code blocks are not bold */
    }

    .ai-message code,
    .user-message code {
        background-color: var(--mud-palette-appbar-background, #27272f);
        color: var(--mud-palette-text-primary);
        padding: 0.2em 0.4em;
        margin: 0 0.1em;
        font-family: "JetBrains Mono" ,Consolas, Monaco, 'Courier New', monospace !important;
        font-size: 85%;
        border-radius: 3px;
        font-weight: bold; /* Inline code remains bold */
    }

    .ai-message table,
    .user-message table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
        font-size: 1rem;
        overflow-x: auto;
        display: block;
    }

    .ai-message th,
    .ai-message td,
    .user-message th,
    .user-message td {
        border-bottom: 1px solid var(--mud-palette-divider);
        padding: 0.75rem 1rem;
        text-align: left;
        vertical-align: top;
    }

    .ai-message th,
    .user-message th {
        font-weight: 600;
        border-bottom: 1px solid var(--mud-palette-drawer-text);
    }

    .ai-message tr:first-of-type td,
    .user-message tr:first-of-type td {
        border-bottom: 1px solid var(--mud-palette-divider);
    }

    .ai-message caption,
    .user-message caption {
        caption-side: bottom;
        padding: 0.5rem;
        color: var(--mud-palette-text-secondary);
        font-size: 0.95em;
        text-align: left;
    }

    .sidebar-chat-row {
        position: relative;
        display: flex;
        align-items: center;
        cursor: pointer;
        padding: 0 16px;
        width: 100%;
        box-sizing: border-box;
        overflow: hidden;
    }

    .sidebar-chat-row .chat-name-text {
        flex-grow: 1;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        min-width: 0;
        padding: 0.177rem;
    }

    .sidebar-chat-row .chat-actions {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        gap: 0.25rem;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.15s ease-in-out;
        background-color: var(--mud-palette-drawer-background);
        padding: 0.25rem;
        border-radius: 4px;
        z-index: 10;
    }

    .sidebar-chat-row .chat-actions > span {
        display: inline-flex;
    }

    .sidebar-chat-row:hover .chat-actions {
        opacity: 1;
        pointer-events: auto;
    }

    .drawer-toggle-button .mud-icon-button {
        background-color: var(--mud-palette-background) !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: left 0.3s ease;
    }

    .drawer-toggle-button .mud-icon-button:hover {
        background-color: var(--mud-palette-action-default-hover) !important;
    }

</style>




















<!-- KaTeX CSS and JS -->
<link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css"
/>
<script
    defer
    src="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.js"
></script>
<script
    defer
    src="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/contrib/auto-render.min.js"
></script>
<!-- Prism.js CSS (okaidia theme) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/katorlys/prism-theme-github/themes/prism-theme-github-copilot.css">

<!-- Prism.js core -->
<script src="https://cdn.jsdelivr.net/npm/prismjs/prism.js"></script>
<!-- Prism.js Autoloader Plugin -->
<script src="https://cdn.jsdelivr.net/npm/prismjs/plugins/autoloader/prism-autoloader.min.js"></script>
<!-- Configure Autoloader path -->
<script>
    // Tell Autoloader where to fetch language components from the CDN
    Prism.plugins.autoloader.languages_path =
        "https://cdn.jsdelivr.net/npm/prismjs/components/";
</script>

<script>
    window.chatScroll = {
        onScroll: function (element, dotNetHelper) {
            element.addEventListener('scroll', function () {
                const atBottom =
                    element.scrollHeight - element.scrollTop - element.clientHeight < 50;
                dotNetHelper.invokeMethodAsync('SetAtBottom', atBottom);
            });
        }
    };

</script>

<script>
    window.streamChatCompletion = async (url, payload, dotnetRef) => {
        const resp = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        if (!resp.ok) {
            const txt = await resp.text();
            await dotnetRef.invokeMethodAsync('Receive', `[Error: ${txt}]`);
            await dotnetRef.invokeMethodAsync('Complete');
            return;
        }

        const reader = resp.body.getReader();
        const decoder = new TextDecoder();
        let buffer = '';

        while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split('\n');
            buffer = lines.pop();
            for (const line of lines) {
                if (!line.trim()) continue;
                try {
                    const obj = JSON.parse(line);
                    if (obj.content) {
                        await dotnetRef.invokeMethodAsync('Receive', obj.content);
                    }
                } catch {}
            }
        }

        if (buffer.trim()) {
            try {
                const obj = JSON.parse(buffer);
                if (obj.content) {
                    await dotnetRef.invokeMethodAsync('Receive', obj.content);
                }
            } catch {}
        }

        await dotnetRef.invokeMethodAsync('Complete');
    };


</script>



<script>
    window.setInnerHtmlAndRenderMath = (element, html) => {
        if (element) {
            element.innerHTML = html;
            // Render math (KaTeX)
            if (window.renderMathInElement) {
                window.renderMathInElement(element, {
                    delimiters: [
                        { left: "$$", right: "$$", display: true }, // For display math $$...$$
                        { left: "\\(", right: "\\)", display: false }, // For inline math \(...\)
                    ],
                    throwOnError: false, // Prevents KaTeX from stopping on errors
                });
            }
            // Highlight code (Prism)
            if (window.Prism) {
                window.Prism.highlightAllUnder(element);

                // Add custom header to Prism code blocks
                const preElements = element.querySelectorAll(
                    'pre[class*="language-"]',
                );
                preElements.forEach((preElement) => {
                    // Check if a header already exists to prevent duplicates
                    if (
                        preElement.previousElementSibling &&
                        preElement.previousElementSibling.classList.contains(
                            "code-block-header",
                        )
                    ) {
                        return;
                    }

                    const codeElement = preElement.querySelector(
                        'code[class*="language-"]',
                    );
                    let language = "";
                    if (codeElement) {
                        const langClass = Array.from(codeElement.classList).find((cls) =>
                            cls.startsWith("language-"),
                        );
                        if (langClass) {
                            language = langClass.replace("language-", "");
                        }
                    } else if (preElement.className.includes("language-")) {
                        // Fallback if language class is on pre and not code
                        const langClass = Array.from(preElement.classList).find((cls) =>
                            cls.startsWith("language-"),
                        );
                        if (langClass) {
                            language = langClass.replace("language-", "");
                        }
                    }

                    language = language
                        ? language.charAt(0).toUpperCase() + language.slice(1)
                        : "Code";

                    const header = document.createElement("div");
                    header.className = "code-block-header";

                    const langSpan = document.createElement("span");
                    langSpan.className = "language-name";
                    langSpan.textContent = language;

                    const copyButton = document.createElement("button");
                    copyButton.className = "copy-button";
                    copyButton.setAttribute("aria-label", "Copy code to clipboard");
                    // SVG icon for "ContentCopy" + Text
                    copyButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 0 24 24" width="16px" fill="currentColor">
                <path d="M0 0h24v24H0V0z" fill="none"/>
                <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
            </svg>
            <span></span>`;

                    copyButton.onclick = () => {
                        const codeToCopy = preElement.querySelector("code").innerText;
                        navigator.clipboard
                            .writeText(codeToCopy)
                            .then(() => {
                                const textSpan = copyButton.querySelector("span:last-child");
                                if (textSpan) textSpan.textContent = "Copied!";
                                setTimeout(() => {
                                    if (textSpan) textSpan.textContent = "";
                                }, 2000);
                            })
                            .catch((err) => {
                                console.error("Failed to copy: ", err);
                                const textSpan = copyButton.querySelector("span:last-child");
                                if (textSpan) textSpan.textContent = "Error!";
                                setTimeout(() => {
                                    if (textSpan) textSpan.textContent = "";
                                }, 2000);
                            });
                    };

                    header.appendChild(langSpan);
                    header.appendChild(copyButton);
                    // Insert header before the pre element
                    preElement.parentNode.insertBefore(header, preElement);
                });
            }
        }
    };
</script>


@Body
@code{
    MudTheme M1ChatTheme = new MudTheme()
    {
        PaletteDark = new PaletteDark()
        {
            Surface = "#1a1a27",
            DrawerBackground = "#1a1a27",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            TextPrimary = "#b2b0bf"
            
        }

    };
}
